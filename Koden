#Import necessary code libraries.

import math
import numpy
from fractions import Fraction

#Define the congruent number and correlating sides of a right-angled triangle. The five chosen here are arbitrary.

triangle_sides=[[3,4,5],[5,12,13],[6,8,10],[9,12,15],[15,20,25]]

for t in range(len(triangle_sides)):
    a= triangle_sides [t][0]
    b= triangle_sides [t][1]
    c= triangle_sides [t][2]    
    n=a*b/2

#Generate the coordinates of the first rational point.

    x=n*(a+c)/b 
    y=2*n**2*(a+c)/b**2 

#Define a list to contain the rational points and append the first point. The coordinates of the first point will need to be integers and there is great importance to defining this in the code. Otherwise, they will be treated as floats. This means their value will not be exact due to the binary nature of the computer’s storage and this affects the credibility of the fractions at the end of the code greatly. Downsides to this solution of the problem with floats is dealt with in the discussion.

    rational_points=[]
    point1=[int(x),int(y)]
    rational_points.append(point1)

#Create a while loop where the variable amount is the number of rational points which will be created, this paper will use 50 points for each congruent number.

    g=1
    amount=50
    while g<amount:
        g+=1 

#Define k- and m-values for the derivative of the first point in order to calculate the first addition.

        if g==2: 
            k=(3*point1[0]**2-n**2)/(2*math.sqrt(point1[0]**3-n**2*point1[0]))
            m=Fraction(point1[1]-k*point1[0])

#Define k- and m-values for the straight lines intersecting the last created rational point and the first generated rational point for the rest of the additions.

        else:
            dx=rational_points[-1][0]-point1[0]
            dy=rational_points[-1][1]-point1[1]
            k=dy/dx
            m=point1[1]-k*point1[0]

#Create the first polynomial division between the polynomial for where the line and curve intersect (ex) and the polynomial created from the generated point P (fx).
    
        a1=1
        b1=-k**2
        c1=-(n**2+2*k*m)
        d1=-m**2
        ex=(a1,b1,c1,d1)
        fx=(1,-point1[0])
        qx1=numpy.polynomial.polynomial.polydiv(ex,fx)
 
#Create the second polynomial division between the quotient polynomial and the polynomial created from the last created rational point (special case: first addition where we will divide by the same polynomial again).
    
        a2=qx1[0]
        b2=qx1[1]
        c2=qx1[2]
        gx=(a2,b2,c2)
        hx=(1,-rational_points[-1][0])
        qx2=numpy.polynomial.polynomial.polydiv(gx,hx)

#Calculate the coordinates of the new point and add these to the list of rational points on the elliptic curve.
    
        new_point_x=Fraction(-qx2[1])
        new_point_y=Fraction(-(k*new_point_x+m))
        rational_points.append([new_point_x,new_point_y])

#Print the parameter that is of importance in the interpretation of the rational points. This gives the fractions in their simplest forms.

    for s in range(len(rational_points)):
        print(math.log(rational_points[s][0].denominator,10)) 
